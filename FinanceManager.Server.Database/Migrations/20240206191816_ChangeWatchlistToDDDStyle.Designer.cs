// <auto-generated />
using System;
using FinanceManager.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(FinanceManagerContext))]
    [Migration("20240206191816_ChangeWatchlistToDDDStyle")]
    partial class ChangeWatchlistToDDDStyle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.5.23280.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Financemanager.Server.Database.Domain.ApiProviderRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditsUsed")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ApiProviderRuns");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.ApiUpdateRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApiUpdateRuns");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.CurrencyRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("EurCad")
                        .HasColumnType("float");

                    b.Property<double>("EurDkk")
                        .HasColumnType("float");

                    b.Property<double>("EurGbp")
                        .HasColumnType("float");

                    b.Property<double>("EurNok")
                        .HasColumnType("float");

                    b.Property<double>("EurSek")
                        .HasColumnType("float");

                    b.Property<double>("EurUsd")
                        .HasColumnType("float");

                    b.Property<bool>("NoData")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.DividendsPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CurrentDivGrowth")
                        .HasColumnType("float");

                    b.Property<double>("NewDivGrowth")
                        .HasColumnType("float");

                    b.Property<double>("StartDividends")
                        .HasColumnType("float");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YearlyInvestment")
                        .HasColumnType("float");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.Property<double>("Yield")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DividendPlans");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.HistoricalDividend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountPerShare")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExDividendDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaymentdDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("HistoricalDividend");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.HistoricalPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ClosePrice")
                        .HasColumnType("float");

                    b.Property<double>("ClosePriceAdjusted")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("HistoricalPrice");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.IexUpdateRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreditsUsed")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IexUpdateRuns");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.PortfolioPosition", b =>
                {
                    b.Property<int>("PortfolioPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortfolioPositionId"));

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("PortfolioPositionId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("StockId");

                    b.ToTable("PortfolioPosition");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.ReceivedDividend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AmountPerShare")
                        .HasColumnType("float");

                    b.Property<int?>("Broker")
                        .HasColumnType("int");

                    b.Property<string>("CompanyTicker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double?>("FxRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShareCount")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalReceived")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.SSDScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DivSafetyScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScoreDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SSDScore");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CccStock")
                        .HasColumnType("bit");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<int>("DGYears")
                        .HasColumnType("int");

                    b.Property<double>("DeptToEquity")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth1")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth10")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth3")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth5")
                        .HasColumnType("float");

                    b.Property<double>("Dividend")
                        .HasColumnType("float");

                    b.Property<double>("EpsGrowth5")
                        .HasColumnType("float");

                    b.Property<double>("EpsTtm")
                        .HasColumnType("float");

                    b.Property<int>("Exchange")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SSDSafetyScoreId")
                        .HasColumnType("int");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SSDSafetyScoreId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.StockDataUpdateSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attribute")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("StockDataUpdateSource");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.StockPurchase", b =>
                {
                    b.Property<int>("StockPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockPurchaseId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("Broker")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioPositionId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StockPurchaseId");

                    b.HasIndex("PortfolioPositionId");

                    b.ToTable("StockPurchase");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.WatchlistStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlarmSent")
                        .HasColumnType("bit");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<double?>("TargetPrice")
                        .HasColumnType("float");

                    b.Property<int?>("WatchlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("WatchlistStock");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.HistoricalDividend", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.Stock", null)
                        .WithMany("DividendHistory")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.HistoricalPrice", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.PortfolioPosition", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.Portfolio", "Portfolio")
                        .WithMany("Positions")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Financemanager.Server.Database.Domain.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Stock", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.SSDScore", "SSDSafetyScore")
                        .WithMany()
                        .HasForeignKey("SSDSafetyScoreId");

                    b.Navigation("SSDSafetyScore");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.StockDataUpdateSource", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.Stock", null)
                        .WithMany("StockDataUpdateSources")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.StockPurchase", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.PortfolioPosition", null)
                        .WithMany("Buys")
                        .HasForeignKey("PortfolioPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.WatchlistStock", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.HasOne("Financemanager.Server.Database.Domain.Watchlist", null)
                        .WithMany("WatchlistStocks")
                        .HasForeignKey("WatchlistId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Portfolio", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.PortfolioPosition", b =>
                {
                    b.Navigation("Buys");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Stock", b =>
                {
                    b.Navigation("DividendHistory");

                    b.Navigation("StockDataUpdateSources");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Watchlist", b =>
                {
                    b.Navigation("WatchlistStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
