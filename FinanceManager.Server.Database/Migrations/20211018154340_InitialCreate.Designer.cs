// <auto-generated />
using System;
using FinanceManager.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Server.Migrations
{
    [DbContext(typeof(FinanceManagerContext))]
    [Migration("20211018154340_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Financemanager.Server.Database.Domain.CurrencyRates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("EurCad")
                        .HasColumnType("float");

                    b.Property<double>("EurDkk")
                        .HasColumnType("float");

                    b.Property<double>("EurGbp")
                        .HasColumnType("float");

                    b.Property<double>("EurNok")
                        .HasColumnType("float");

                    b.Property<double>("EurSek")
                        .HasColumnType("float");

                    b.Property<double>("EurUsd")
                        .HasColumnType("float");

                    b.Property<bool>("NoData")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.DividendsPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentDivGrowth")
                        .HasColumnType("float");

                    b.Property<double>("NewDivGrowth")
                        .HasColumnType("float");

                    b.Property<double>("StartDividends")
                        .HasColumnType("float");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YearlyInvestment")
                        .HasColumnType("float");

                    b.Property<int>("Years")
                        .HasColumnType("int");

                    b.Property<double>("Yield")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DividendPlans");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.IexUpdateRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreditsUsed")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IexUpdateRuns");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.PortfolioPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("StockId");

                    b.ToTable("PortfolioPositions");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.ReceivedDividend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AmountPerShare")
                        .HasColumnType("float");

                    b.Property<int?>("Broker")
                        .HasColumnType("int");

                    b.Property<string>("CompanyTicker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double?>("FxRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShareCount")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalReceived")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float");

                    b.Property<int>("DGYears")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataUpdateSource")
                        .HasColumnType("int");

                    b.Property<double>("DeptToEquity")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth1")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth10")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth3")
                        .HasColumnType("float");

                    b.Property<double>("DivGrowth5")
                        .HasColumnType("float");

                    b.Property<double>("Dividend")
                        .HasColumnType("float");

                    b.Property<double>("EpsGrowth5")
                        .HasColumnType("float");

                    b.Property<double>("EpsTtm")
                        .HasColumnType("float");

                    b.Property<int>("Exchange")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PriceLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriceSource")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticker")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.StockPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("Broker")
                        .HasColumnType("int");

                    b.Property<int?>("PortfolioPositionId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioPositionId");

                    b.ToTable("StockPurchases");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.WatchlistStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlarmSent")
                        .HasColumnType("bit");

                    b.Property<bool>("Notify")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<double?>("TargetPrice")
                        .HasColumnType("float");

                    b.Property<int?>("WatchlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("WatchlistStocks");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.PortfolioPosition", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.Portfolio", null)
                        .WithMany("Positions")
                        .HasForeignKey("PortfolioId");

                    b.HasOne("Financemanager.Server.Database.Domain.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.StockPurchase", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.PortfolioPosition", null)
                        .WithMany("Buys")
                        .HasForeignKey("PortfolioPositionId");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.WatchlistStock", b =>
                {
                    b.HasOne("Financemanager.Server.Database.Domain.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.HasOne("Financemanager.Server.Database.Domain.Watchlist", null)
                        .WithMany("Stocks")
                        .HasForeignKey("WatchlistId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Portfolio", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.PortfolioPosition", b =>
                {
                    b.Navigation("Buys");
                });

            modelBuilder.Entity("Financemanager.Server.Database.Domain.Watchlist", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
